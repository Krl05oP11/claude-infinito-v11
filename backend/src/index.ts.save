
import express from 'express';
import cors from 'cors';
import helmet from 'helmet';
import compression from 'compression';
import dotenv from 'dotenv';
import { createLogger } from './utils/logger';
import { DatabaseService } from './services/database.service';
import { RAGService } from './services/rag.service';
import uploadRoutes from './api/routes/upload';

dotenv.config();

const app = express();
const port = process.env.BACKEND_PORT || 3001;
const logger = createLogger();
const dbService = new DatabaseService();
const ragService = new RAGService();

// Connect to database
dbService.connect().catch(err => logger.error('DB connection failed:', err));

// Middleware
app.use(helmet());
app.use(cors());
app.use(compression());
app.use(express.json({ limit: '10mb' }));
app.use(express.urlencoded({ extended: true }));
app.use('/api/upload', uploadRoutes); // NUEVO AGREGADOÂ¿?

// Chat routes
app.use('/api/chat', require('./api/routes/chat').default);

// Conversations endpoints
app.get('/api/conversations', async (req: express.Request, res: express.Response): Promise<void> => {
  try {
    const conversations = await dbService.getConversations();
    res.json({ conversations });
  } catch (error) {
    logger.error('Error fetching conversations:', error);
    res.status(500).json({ error: 'Database error' });
  }
});

app.post('/api/conversations', async (req: express.Request, res: express.Response): Promise<void> => {
  try {
    const { title, project_id } = req.body;
    const conversation = await dbService.createConversation(title || 'New Conversation', project_id);
    res.json(conversation);
  } catch (error) {
    logger.error('Error creating conversation:', error);
    res.status(500).json({ error: 'Database error' });
  }
});

// Messages endpoint with RAG integration
app.post('/api/conversations/:id/messages', async (req: express.Request, res: express.Response): Promise<void> => {
  try {
    const conversationId = req.params.id;
    const { content } = req.body;

    if (!content) {
      res.status(400).json({ error: 'Message content required' });
      return;
    }

    logger.info(`Processing message for conversation ${conversationId}`);

    // 1. Save user message
    const userMessage = await dbService.addMessage(conversationId, 'user', content);
    
    // 2. Get recent messages from current conversation
    const recentMessages = await dbService.getMessages(conversationId, 5);
    
    // 3. Initialize variables for RAG
    let relevantMemories: any[] = [];
    let contextualMemory: string = '';
    
    // SECTION TO REPLACE in backend/src/index.ts
    // Find this section and replace it:

// 4. Search for relevant context using RA    let contextualMemory = '';
try {
  const ragService = new RAGService();
  const relevantMemories = await ragService.searchRelevantContext(messageContent, conversation.id, 8);
  
  if (relevantMemories && relevantMemories.length > 0) {
    logger.info(`Found ${relevantMemories.length} relevant memories`);
    
    // SEPARATE FILE CONTENT FROM CONVERSATION HISTORY
    const fileMemories = relevantMemories.filter(memory => 
      memory.metadata.source_type === 'file_upload'
    );
    
    const conversationMemories = relevantMemories.filter(memory => 
      memory.metadata.source_type !== 'file_upload'
    );
    
    let contextSections = [];
    
    // ADD FILE CONTENT FIRST (most important)
    if (fileMemories.length > 0) {
      const fileParts = fileMemories.map(memory => {
        const fileName = memory.metadata.file_name || 'archivo';
        const section = memory.metadata.section || 'contenido';
        const similarity = Math.round((1 - (memory.distance || 0)) * 100);
        
        return `**Archivo: ${fileName}** (${section})\n${memory.content}`;
      });
      
      contextSections.push(`--- ARCHIVOS SUBIDOS ---\n${fileParts.join('\n\n')}`);
    }
    
    // ADD CONVERSATION HISTORY SECOND (for context)
    if (conversationMemories.length > 0) {
      const conversationParts = conversationMemories.map(memory => {
        const timestamp = memory.metadata.timestamp ? 
          new Date(memory.metadata.timestamp).toLocaleString() : 'tiempo desconocido';
        const similarity = Math.round((1 - (memory.distance || 0)) * 100);
        
        return `[${similarity}% similitud | ${timestamp}]\n${memory.content}`;
      });
      
      contextSections.push(`--- CONTEXTO CONVERSACIONAL ---\n${conversationParts.join('\n\n')}`);
    }
    
    // BUILD FINAL CONTEXT
    if (contextSections.length > 0) {
      contextualMemory = `\n\n${contextSections.join('\n\n---\n\n')}\n--- FIN INFORMACIÃ“N DISPONIBLE ---\n\n`;
      
      logger.info(`Injecting ${contextualMemory.length} characters of context`);
      logger.info(`File memories: ${fileMemories.length}, Conversation memories: ${conversationMemories.length}`);
    }
  } else {
    logger.info('No relevant historical context found');
  }
} catch (ragError) {
  logger.warn('RAG search failed, continuing without context:', ragError);
}

// 5. Build messages for Claude with injected context
const claudeMessages = recentMessages.map(msg => ({
  role: msg.role as 'user' | 'assistant',
  content: msg.content
}));

// 6. IMPROVED CONTEXT INJECTION
if (claudeMessages.length > 0 && contextualMemory) {
  const lastUserIndex = claudeMessages.length - 1;
  if (claudeMessages[lastUserIndex].role === 'user') {
    // PREPEND context to user message with clear instructions
    claudeMessages[lastUserIndex].content = `${contextualMemory}

INSTRUCCIÃ“N: Usa la informaciÃ³n de los archivos subidos y el contexto conversacional de arriba para responder la siguiente pregunta:

${claudeMessages[lastUserIndex].content}`;
  }
}
    // 7. Send to Claude API
    const { ClaudeService } = require('./services/claude.service');
    const claudeService = new ClaudeService();
    
    logger.info('Sending to Claude API with context...');
    const claudeResponse = await claudeService.sendMessage(claudeMessages);
    const assistantContent = claudeResponse.content[0]?.text || 'Sorry, could not generate response.';

    // 8. Save Claude's response
    const assistantMessage = await dbService.addMessage(conversationId, 'assistant', assistantContent, { 
      model: claudeResponse.model,
      usage: claudeResponse.usage,
      context_used: relevantMemories?.length || 0
    });

    // 9. Store new messages in ChromaDB for future searches
    try {
      // Use project_id if exists, otherwise use 'general'
      const conversation = await dbService.getConversationById(conversationId);
      const projectId = conversation?.project_id || 'general';
      
      // Store user message
      await ragService.addMemory(
        projectId, 
        conversationId, 
        content,
        { 
          role: 'user',
          timestamp: new Date().toISOString(),
          conversation_title: conversation?.title || 'Untitled'
        }
      );

      // Store assistant response
      await ragService.addMemory(
        projectId, 
        conversationId, 
        assistantContent,
        { 
          role: 'assistant',
          timestamp: new Date().toISOString(),
          conversation_title: conversation?.title || 'Untitled',
          model: claudeResponse.model
        }
      );

      logger.info('Stored messages in ChromaDB for future context');
    } catch (storageError) {
      logger.warn('Failed to store in ChromaDB:', storageError);
    }

    // 10. Respond to frontend
    res.json({
      user_message: userMessage,
      assistant_message: assistantMessage,
      usage: claudeResponse.usage,
      context_memories_used: relevantMemories?.length || 0
    });

    logger.info(`Message processed successfully. Context memories used: ${relevantMemories?.length || 0}`);

  } catch (error) {
    logger.error('Error processing message:', error);
    res.status(500).json({ error: 'Failed to process message' });
  }
});

// Health check endpoints
app.get('/api/health', async (req, res) => {
  const ragHealth = await ragService.healthCheck();
  
  res.json({
    status: 'ok',
    timestamp: new Date().toISOString(),
    uptime: process.uptime(),
    environment: process.env.NODE_ENV,
    services: {
      database: 'connected',
      chromadb: ragHealth ? 'healthy' : 'unhealthy'
    }
  });
});

app.get('/api/info', (req, res) => {
  res.json({
    name: 'Claude Infinito v1.1 Backend',
    version: '1.1.0',
    features: ['RAG Integration', 'Persistent Memory', 'Cross-Project Context']
  });
});

app.get('/', (req, res) => {
  res.json({ 
    message: 'Claude Infinito v1.1 Backend - Memory Enabled', 
    status: 'running'
  });
});

app.listen(port, () => {
  logger.info(`ðŸš€ Claude Infinito Backend running on port ${port}`);
  logger.info('ðŸ§  RAG-enabled memory system active');
});

export default app;
