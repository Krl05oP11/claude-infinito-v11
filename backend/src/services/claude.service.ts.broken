import axios from 'axios';
import { createLogger } from '../utils/logger';

const logger = createLogger();

export interface ClaudeMessage {
  role: 'user' | 'assistant';
  content: string;
}

export interface ClaudeSettings {
  temperature?: number;
  prompt?: string;
  promptType?: string;
  maxTokens?: number;
}

export interface ClaudeResponse {
  content: Array<{
    type: string;
    text: string;
  }>;
  model: string;
  usage: {
    input_tokens: number;
    output_tokens: number;
  };
}

export class ClaudeService {
  private apiKey: string;
  private model: string;
  private defaultMaxTokens: number;
  private defaultTemperature: number;
  private baseUrl: string;

  // Prompt templates for different use cases
  private promptTemplates: Record<'precise' | 'balanced' | 'detailed' | 'creative', {
    name: string;
    template: string;
    temperature: number;
  }> = { // ✅ FIXED: Explicit typing
    precise: {
      name: 'Preciso y Técnico',
      template: 'Responde de manera precisa y técnica. Usa terminología específica. Sé conciso pero completo. Si citas fuentes, menciona específicamente de qué archivo proviene la información.',
      temperature: 0.2
    },
    balanced: {
      name: 'Balanceado',
      template: 'Proporciona respuestas balanceadas que combinen precisión técnica con claridad explicativa. Incluye ejemplos cuando sea útil. Si la información proviene de archivos subidos, cita la fuente específica.',
      temperature: 0.4
    },
    detailed: {
      name: 'Detallado y Didáctico',
      template: 'Proporciona explicaciones detalladas y didácticas. Incluye contexto, ejemplos prácticos y razonamiento paso a paso. Desarrolla los conceptos en profundidad. Cuando uses información de archivos, explica cómo se relaciona con el contexto general.',
      temperature: 0.5
    },
    creative: {
      name: 'Creativo y Exploratorio',
      template: 'Adopta un enfoque creativo y exploratorio. Genera ideas innovadoras, conexiones inesperadas y soluciones originales. Explora múltiples perspectivas y posibilidades. Usa la información de archivos como punto de partida para desarrollar ideas nuevas.',
      temperature: 0.7
    }
  };

  constructor() {
    this.apiKey = process.env.CLAUDE_API_KEY || '';
    this.model = process.env.CLAUDE_MODEL || 'claude-sonnet-4-20250514';
    this.defaultMaxTokens = parseInt(process.env.CLAUDE_MAX_TOKENS || '4000');
    this.defaultTemperature = parseFloat(process.env.CLAUDE_TEMPERATURE || '0.3');
    this.baseUrl = 'https://api.anthropic.com/v1/messages';

    if (!this.apiKey) {
      throw new Error('CLAUDE_API_KEY environment variable is required');
    }

    logger.info(`Claude Service initialized: model=${this.model}, defaultTemp=${this.defaultTemperature}, defaultMaxTokens=${this.defaultMaxTokens}`);
  }

  async sendMessage(messages: ClaudeMessage[], settings: ClaudeSettings = {}): Promise<ClaudeResponse> {
    try {
      // Use provided settings or defaults
      const temperature = settings.temperature ?? this.defaultTemperature;
      const maxTokens = settings.maxTokens ?? this.defaultMaxTokens;
      
      // Apply prompt template if specified
      let processedMessages = [...messages];
      if (settings.promptType && this.promptTemplates[settings.promptType]) {
        const template = this.promptTemplates[settings.promptType];
        // Merge template with last user message
        const lastMessage = processedMessages[processedMessages.length - 1];
        if (lastMessage && lastMessage.role === 'user') {
          const templateInstruction = template.template;
          lastMessage.content = `${templateInstruction}\n\n${lastMessage.content}`;
        }
      } else if (settings.prompt) {
        // Use custom prompt
        const lastMessage = processedMessages[processedMessages.length - 1];
        if (lastMessage && lastMessage.role === 'user') {
          lastMessage.content = `${settings.prompt}\n\n${lastMessage.content}`;
        }
      }

      const requestBody = {
        model: this.model,
        max_tokens: maxTokens,
        temperature: temperature,
        messages: processedMessages.map(msg => ({
          role: msg.role,
          content: msg.content
        }))
      };

      logger.info(`Sending request to Claude: temp=${temperature}, tokens=${maxTokens}, promptType=${settings.promptType || 'none'}, messages=${messages.length}`);
      
      const response = await axios.post(this.baseUrl, requestBody, {
        headers: {
          'Content-Type': 'application/json',
          'x-api-key': this.apiKey,
          'anthropic-version': '2023-06-01'
        },
        timeout: 60000
      });

      const claudeResponse: ClaudeResponse = response.data;
      
      logger.info(`Claude response: ${claudeResponse.usage.input_tokens} input tokens, ${claudeResponse.usage.output_tokens} output tokens`);
      
      return claudeResponse;

    } catch (error: any) {
      if (error.response) {
        logger.error('Claude API error:', {
          status: error.response.status,
          data: error.response.data,
          settings: settings
        });
        throw new Error(`Claude API error: ${error.response.status} - ${JSON.stringify(error.response.data)}`);
      } else if (error.request) {
        logger.error('Claude API network error:', error.message);
        throw new Error('Claude API network error: No response received');
      } else {
        logger.error('Claude API unexpected error:', error.message);
        throw new Error(`Claude API unexpected error: ${error.message}`);
      }
    }
  }

  // Get available prompt templates
  getPromptTemplates() {
    return this.promptTemplates;
  }

  // Get default settings
  getDefaultSettings(): ClaudeSettings {
    return {
      temperature: this.defaultTemperature,
      maxTokens: this.defaultMaxTokens,
      promptType: 'balanced'
    };
  }

  // Validate settings
  validateSettings(settings: ClaudeSettings): { valid: boolean; errors: string[] } {
    const errors: string[] = [];
    
    if (settings.temperature !== undefined) {
      if (settings.temperature < 0 || settings.temperature > 1) {
        errors.push('Temperature must be between 0 and 1');
      }
    }
    
    if (settings.maxTokens !== undefined) {
      if (settings.maxTokens < 100 || settings.maxTokens > 8000) {
        errors.push('Max tokens must be between 100 and 8000');
      }
    }
    
    if (settings.promptType && !this.promptTemplates[settings.promptType]) { // ✅ SIMPLIFIED: Direct access
      errors.push('Invalid prompt type');
    }
    
    return {
      valid: errors.length === 0,
      errors
    };
  }

  // Check if service is properly configured
  isConfigured(): boolean {
    return !!(this.apiKey && this.model);
  }

  // Health check method
  async healthCheck(): Promise<boolean> {
    try {
      const testMessages: ClaudeMessage[] = [
        { role: 'user', content: 'Test connection. Respond with "OK".' }
      ];

      await this.sendMessage(testMessages, { temperature: 0.1, maxTokens: 10 });
      return true;
    } catch (error) {
      logger.error('Claude service health check failed:', error);
      return false;
    }
  }
}

export default ClaudeService;

